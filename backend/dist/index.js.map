{
  "version": 3,
  "sources": ["../src/config/config.ts", "../src/app.ts", "../src/helpers/errorHandler.ts", "../src/helpers/token-json.ts", "../src/helpers/password-crypt.ts", "../src/helpers/prisma.ts", "../src/helpers/businesslogic.ts", "../src/routes/auth.ts", "../src/DTO/registerBusiness.ts", "../src/DTO/transactions.ts", "../src/controllers/register.ts", "../src/controllers/login.ts", "../src/controllers/transactions.ts", "../src/controllers/funds.ts", "../src/controllers/search.ts", "../src/routes/transaction.ts", "../src/middleware.ts", "../src/routes/funds.ts", "../src/index.ts"],
  "sourcesContent": ["import 'dotenv/config';\n\n\nclass Config {\n  public readonly PORT: number;\n  public readonly DATABASE_URL: string;\n  public readonly JWT_SECRET: string;\n  public readonly email_sender: string;\n  public readonly email_sender_pass: string;\n  public readonly Front_url: string;\n public readonly ENVIRONMENT: string\n  constructor() {\n    this.PORT = Number(process.env.PORT) || 3500;\n    this.DATABASE_URL = process.env.DATABASE_URL || '';\n    this.JWT_SECRET = process.env.JWT_SECRET || 'udduLovesToGetDominated';\n    this.ENVIRONMENT = process.env.ENVIRONMENT || 'development';\n  }\n\n  public verifyConfig(): void {\n    const errors: string[] = [];\n\n    const envVariables = ['DATABASE_URL'];\n\n    envVariables.forEach((envVariable) => {\n      if (!process.env[envVariable]) {\n        errors.push(`Missing ${envVariable} in environment variables`);\n      }\n    });\n\n    if (errors.length > 0) {\n      throw new Error(errors.join('\\n'));\n    }\n  }\n\n}\n\nexport const config: Config = new Config();\n", "import express from 'express'\nimport cors from 'cors'\nimport {errorHandler} from './helpers'\nimport { authRouter, fundsRouter, transRouter } from './routes/';\nimport { createRouteHandler } from 'uploadthing/express';\n\nexport const app = express();\n\n\napp.use(cors());\napp.use(express.json());\napp.get('/', (req, res) => {\n  res.json({ message: 'Welcome to the TrustTrade' });\n});\napp.use('/auth', authRouter)\napp.use('/transact', transRouter)\napp.use('/funds',fundsRouter)\napp.use(errorHandler);", "import { Request, Response, NextFunction } from 'express';\n\ninterface ErrorWithStatus extends Error {\n  status?: number;\n}\n\nexport const errorHandler = (\n  err: ErrorWithStatus,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n\n  let status = err.status || 500;\n\n\n  switch (status) {\n    case 400: {\n      const message = 'Bad Request';\n      return res.status(status).json({ message });\n    }\n    case 401: {\n      const message = 'Unauthorized';\n      return res.status(status).json({ message });\n    }\n    case 403: {\n      const message = 'Forbidden';\n      return res.status(status).json({ message });\n    }\n    case 404: {\n      const message = 'Not Found';\n      return res.status(status).json({ message });\n    }\n\n  }\n\n\n  console.error(err);\n\n\n  const message = 'Something went wrong. Please try again later.';\n  return res.status(status).json({ message });\n};\n", "import jsonwebtoken from 'jsonwebtoken';\nimport { config } from '../config/config';\nclass JWT {\n  public create_token = async (email: string, owner: string, business = '') => {\n    const token = jsonwebtoken.sign({ email, owner, business }, config.JWT_SECRET, {\n      expiresIn: '48h',\n    });\n    return token;\n  };\u00A0\n}\n\nexport const tokens: JWT = new JWT();\n", "import bcryptjs from 'bcryptjs';\n\nclass Password {\n  public password_crypt = async (password) => {\n    const sa = await bcryptjs.genSalt(10);\n    const hashedpassword = bcryptjs.hash(password, sa);\n    return hashedpassword;\n  };\n   public password_compare = async (password, hashedpassword) => {\n    const compare = await bcryptjs.compare(password, hashedpassword);\n    return compare;\n  };\n}\n\nexport const Pass: Password = new Password();", "import { PrismaClient } from '@prisma/client';\nimport { config } from '../config/config';\n\nexport let prisma: PrismaClient;\n\nif (config.ENVIRONMENT=== 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();\n  }\n  prisma = globalThis.prisma;\n}\n\n\n", "\n\nimport { Funds, User } from '@prisma/client';\n\ninterface BusinessMetrics {\n  sumAssured: number;\n  safetyRating: number;\n}\n\nexport const  calculateBusinessMetrics=(\n  user: User,\n  funds: Funds[]\n): BusinessMetrics=> {\n  const currentDate = new Date();\n  const registrationDate = user.registeredAt;\n  const businessAge =\n    (currentDate.getTime() - registrationDate.getTime()) /\n    (1000 * 60 * 60 * 24 * 365); // in years\n\n  // Calculate base sum assured\n  let sumAssured = funds.reduce((sum, fund) => sum + fund.income, 0);\n\n  // Adjust sum assured based on business age\n  if (businessAge < 0.3) {\n    sumAssured *= 0.8; // 20% reduction for businesses less than a year old\n  } else if (businessAge < 1.5) {\n    sumAssured *= 0.9; // 10% reduction for businesses 1-3 years old\n  } else if (businessAge > 2) {\n    sumAssured *= 1.1; // 10% increase for businesses more than 5 years old\n  }\n\n  // Calculate safety rating\n  let safetyPoints = 3; // Start with a neutral rating\n\n  // Adjust based on income vs loss ratio\n  const totalIncome = funds.reduce((sum, fund) => sum + fund.income, 0);\n  const totalLoss = funds.reduce((sum, fund) => sum + fund.loss, 0);\n  const incomeToLossRatio = totalIncome / (totalLoss || 1);\n\n  if (incomeToLossRatio > 2) safetyPoints++;\n  if (incomeToLossRatio > 4) safetyPoints++;\n  if (incomeToLossRatio < 1) safetyPoints--;\n  if (incomeToLossRatio < 0.5) safetyPoints--;\n\n  // Adjust based on tax compliance\n  const totalTaxPaid = funds.reduce((sum, fund) => sum + fund.taxPaid, 0);\n  const totalTaxPayable = funds.reduce((sum, fund) => sum + fund.taxPayable, 0);\n  const taxComplianceRatio = totalTaxPaid / (totalTaxPayable || 1);\n\n  if (taxComplianceRatio > 0.9) safetyPoints++;\n  if (taxComplianceRatio < 0.7) safetyPoints--;\n\n  // Ensure safety rating is between 1 and 5\n  const safetyRating = Math.max(1, Math.min(5, safetyPoints));\n\n  return { sumAssured, safetyRating };\n}\n", "import express from 'express'\nimport { loginBusiness, registerBusiness } from '../controllers';\n\nexport const authRouter = express.Router();\nauthRouter.post('/register',registerBusiness).post('/login',loginBusiness)", "import z from 'zod'\nexport const businessSignup = z.object({\n  promoter_name: z.string(),\n  business_name:z.string(),\n  email:z.string().email(),\n  password: z.string(),\n  \n})\nexport const businessLogin = z.object({\n  email: z.string().email(),\n  password: z.string(),\n})", "import z from 'zod'\nexport const newTransaction = z.object({\n  date: z.string(),\n  id: z.string(),\n  amount: z.number(),\n  invoice : z.string(),\n\n})", "import { Request, Response, NextFunction } from 'express';\nimport { businessSignup } from '../DTO';\nimport { prisma } from '../helpers';\nimport { Pass, tokens } from '../helpers';\n\nexport const registerBusiness = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const body = req.body;\n\n    const parsedBody = businessSignup.safeParse(body);\n\n\n    if (!parsedBody.success) {\n      return res.status(403).json({ message: 'enter required fields' });\n    }\n    const existingEmail = await prisma.user.findFirst({\n      where: {\n        email: parsedBody.data.email,\n      },\n    });\n    if (existingEmail) {\n      return res.status(400).json({ message: 'email already exists' });\n    }\n    const businessRegistred = await prisma.user.findFirst({\n      where: {\n        AND: [\n          { business_name: parsedBody.data.business_name.toLowerCase() },\n          { promoter_name: parsedBody.data.promoter_name.toLowerCase() },\n        ],\n      },\n    });\n\n    if (businessRegistred) {\n      return res.status(400).json({ message: 'business already added' });\n    }\n    const hashedPassword = await Pass.password_crypt(parsedBody.data.password);\n       await prisma.user.create({\n      data: {\n\n        email: parsedBody.data.email,\n        password: hashedPassword,\n        business_name: parsedBody.data.business_name.toLowerCase(),\n        promoter_name: parsedBody.data.promoter_name.toLowerCase(),\n      },\n    });\n    const token = await tokens.create_token(\n      parsedBody.data.email,\n\n      parsedBody.data.promoter_name,\n      parsedBody.data.business_name\n    );\n    res\n      .status(201)\n      .json({ message: 'business registered successfully', token: token });\n  } catch (error) {\n    next(error);\n  }\n};\n", "import { Request, Response, NextFunction } from 'express';\nimport { businessLogin } from '../DTO';\nimport { prisma } from '../helpers';\nimport { Pass, tokens } from '../helpers';\n\nexport const loginBusiness = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const body = req.body;\n    const parsedBody = businessLogin.safeParse(body);\n    if (!parsedBody.success) {\n      return res.status(403).json({ message: 'enter required fields' });\n    }\n    const existingEmail = await prisma.user.findFirst({\n      where: {\n        email: parsedBody.data.email,\n      },\n    });\n    if (!existingEmail) {\n      return res.status(400).json({ message: 'email is incorrect' });\n    }\n\n    const comparePassword = await Pass.password_compare(\n      parsedBody.data.password,\n      existingEmail.password\n    );\n    if (!comparePassword) {\n      return res.status(400).json({ message: 'password is incorrect' });\n    }\n\n    const token = await tokens.create_token(\n      parsedBody.data.email,\n\n      existingEmail.promoter_name,\n      existingEmail.business_name\n    );\n    res\n      .status(201)\n      .json({ message: 'business Login successfully', token: token });\n  } catch (error) {\n    next(error);\n  }\n};\n", "import { Request, Response, NextResponse } from 'express';\nimport { prisma } from '../helpers';\nimport { newTransaction } from '../DTO';\nexport const initiateTransaction = async (\n  req: Request,\n  res: Response,\n  next: NextResponse\n) => {\n  try {\n    const buyerEmail = req.user.email;\n    const data = req.body;\n    console.log(data);\n    const parsed = newTransaction.safeParse(data);\n\n    if (!parsed.success) {\n      return res.status(403).json({ message: 'enter required fields' });\n    }\n    const buyerID = await prisma.user.findFirst({\n      where: {\n        email: buyerEmail,\n      },\n      select: { id: true, sumAssured: true },\n    });\n\n    const sellerID = await prisma.user.findFirst({\n      where: {\n        id: parsed.data.id,\n      },\n      select: { id: true, sumAssured: true },\n    });\n\n    if (!buyerID || !sellerID) {\n      return res.status(200).json({ message: 'seller or buyer not found' });\n    }\n    if (\n      parsed.data.amount > sellerID?.sumAssured ||\n      parsed.data.amount > buyerID?.sumAssured\n    ) {\n      return res.status(200).json({ message: 'Insufficient Sum assured' });\n    }\n    await prisma.transaction.create({\n      data: {\n        buyerId: buyerID.id,\n        sellerId: sellerID.id,\n        amount: parsed.data.amount,\n        date: parsed.data.date,\n        invoice : data.invoice,\n        status: 'PENDING',\n      },\n    });\n    return res.status(200).json({ message: 'transaction initiated' });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getBuyerTransaction = async (\n  req: Request,\n  res: Response,\n  next: NextResponse\n) => {\n  try {\n    const email = req.user.email;\n    const buyerID = await prisma.user.findFirst({\n      where: {\n        email: email,\n      },\n      select: { id: true },\n    });\n    const entries = await prisma.transaction.findMany({\n      where: {\n        buyerId: buyerID?.id,\n      },\n      orderBy: {\n        date: 'desc',\n      },\n      take: 10,\n    });\n    if (!entries || entries.length === 0) {\n      return res.status(200).json([]);\n    }\n    const sellerIds = [...new Set(entries.map((entry) => entry.sellerId))];\n\n    const sellers = await prisma.user.findMany({\n      where: {\n        id: { in: sellerIds },\n      },\n      select: { id: true, business_name: true },\n    });\n\n    const sellerMap = sellers.reduce((acc, seller) => {\n      acc[seller.id] = seller.business_name;\n      return acc;\n    }, {});\n\n    const updatedEntries = entries.map((entry) => {\n      const sellerName = sellerMap[entry.sellerId];\n\n      const date = new Date(entry.date);\n      const monthYear = date.toLocaleString('default', {\n        day: '2-digit',\n        month: 'long',\n      });\n\n      return {\n        id: entry.id,\n        date: monthYear,\n        amount: entry.amount,\n        status: entry.status,\n        sellerName: sellerName,\n      };\n    });\n\n    res.send(updatedEntries);\n  } catch (error) {\n    next(error);\n  }\n};\nexport const getSellerTransaction = async (\n  req: Request,\n  res: Response,\n  next: NextResponse\n) => {\n  try {\n    const email = req.user.email;\n\n    const sellerID = await prisma.user.findFirst({\n      where: {\n        email: email,\n      },\n      select: { id: true },\n    });\n\n    const entries = await prisma.transaction.findMany({\n      where: {\n        sellerId: sellerID?.id,\n      },\n      take: 10,\n      orderBy: {\n        date: 'desc',\n      },\n    });\n    if (!entries || entries.length === 0) {\n      return res.status(200).json([]);\n    }\n\n    const buyerIds = [...new Set(entries.map((entry) => entry.buyerId))];\n\n    const buyers = await prisma.user.findMany({\n      where: {\n        id: { in: buyerIds },\n      },\n      select: { id: true, business_name: true },\n    });\n\n    const sellerMap = buyers.reduce((acc, buyer) => {\n      acc[buyer.id] = buyer.business_name;\n      return acc;\n    }, {});\n\n    const updatedEntries = entries.map((entry) => {\n      const buyerName = sellerMap[entry.buyerId];\n\n      const date = new Date(entry.date);\n      const monthYear = date.toLocaleString('default', {\n        month: 'long',\n        day: '2-digit',\n      });\n\n      return {\n        id: entry.id,\n        date: monthYear,\n        amount: entry.amount,\n        status: entry.status,\n        buyerName: buyerName,\n      };\n    });\n\n    res.send(updatedEntries);\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getPendingTransactionsn = async (\n  req: Request,\n  res: Response,\n  next: NextResponse\n) => {\n  try {\n    const email = req.user.email;\n\n    const sellerID = await prisma.user.findFirst({\n      where: {\n        email: email,\n      },\n      select: { id: true },\n    });\n\n    const entries = await prisma.transaction.findMany({\n      where: {\n        sellerId: sellerID?.id,\n        status: 'PENDING',\n      },\n      take: 10,\n      orderBy: {\n        date: 'desc',\n      },\n    });\n\n    if (!entries || entries.length === 0) {\n      return res.status(200).json([]);\n    }\n\n    const buyerIds = [...new Set(entries.map((entry) => entry.buyerId))];\n\n    const buyers = await prisma.user.findMany({\n      where: {\n        id: { in: buyerIds },\n      },\n      select: { id: true, business_name: true },\n    });\n\n    const buyerMap = buyers.reduce((acc, buyer) => {\n      acc[buyer.id] = buyer.business_name;\n      return acc;\n    }, {});\n\n    const response = entries.map((entry) => {\n      const date = new Date(entry.date);\n      const formattedDate = `${date.getDate().toString().padStart(2, '0')}-${(\n        date.getMonth() + 1\n      )\n        .toString()\n        .padStart(2, '0')}`;\n      return {\n        id:entry.id,\n        amount: entry.amount,\n        business_name: buyerMap[entry.buyerId],\n        date: formattedDate,\n      };\n    });\n\n    res.status(200).json(response);\n  } catch (error) {\n    next(error);\n  }\n};\nexport const approvePendingTransactions = async (\n  req: Request,\n  res: Response,\n  next: NextResponse\n) => {\n  try {\n    const { id, type } = req.body;\n    console.log(id)\n    const change = await prisma.transaction.update({\n      where: { id: id },\n      data: {\n        status: type,\n      }\n     \n    })\n     res.send({ message: 'Approved' });\n  } catch (error) {\n    next(error);\n  }\n};\n", "import { Request, Response, NextFunction } from 'express';\nimport axios from 'axios';\nimport pdf from 'pdf-parse';\nimport { calculateBusinessMetrics, prisma } from '../helpers';\nexport const AddFunds = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const userEmail = req.user.email;\n    const url = req.body.url;\n\n    const response = await axios.get(url, { responseType: 'arraybuffer' });\n    const data = await pdf(response.data);\n    const text = data.text;\n\n    const extractedData = extractInformation(text);\n    if ('message' in extractedData) {\n      return res.json(extractedData);\n    }\n    const userId = await prisma.user.findFirst({\n      where: { email: userEmail }\n    })\n    if (!userId\n    ) {\n      return res.status(400).json({ message: 'user not found' });\n    }\n    const dbEntry = await prisma.funds.create({\n      data: {\n        name: extractedData.name,\n        formNumber: extractedData.formNumber,\n        loss: extractedData.loss,\n        income: extractedData.income,\n        taxPayable: extractedData.taxPayable,\n        taxPaid: extractedData.taxPaid,\n        userId:userId.id\n      },\n    });\n    const funds = await prisma.funds.findMany({\n      where: { userId: userId.id },\n      \n    })\n    const businessMetric = calculateBusinessMetrics(userId, funds)\n    await prisma.user.update({\n      where: { id: userId.id }, data: {\n        sumAssured: businessMetric.sumAssured,\n        safetyRating: businessMetric.safetyRating,\n      }\n    })\n    res.json(dbEntry);\n  } catch (error) {\n    next(error);\n  }\n};\nfunction extractInformation(text) {\n  let result = {\n    name: '',\n    formNumber: '',\n    businessLoss: 0,\n    totalIncome: 0,\n    totalTaxInterestFeePayable: 0,\n    taxesPaid: 0,\n    accretedIncome: 0,\n    additionalTaxInterestPayable: 0,\n    taxInterestPaid: 0,\n  };\n  let output = {\n    name: '',\n    formNumber: '',\n    loss: NaN,\n    income: NaN,\n    taxPaid: NaN,\n    taxPayable: NaN,\n  };\n  const nameMatch = text.match(/Name([A-Z\\s]+)/);\n  if (nameMatch) {\n    result.name = nameMatch[1]\n      .trim()\n      .substring(0, nameMatch[1].trim().length - 2);\n  }\n\n  const formNumberMatch = text.match(/Form Number([A-Z0-9-]+)/);\n  if (formNumberMatch) {\n    result.formNumber = formNumberMatch[1].trim();\n  }\n\n  const totalIncomeMatch = text.match(/Total Income\\s*([\\d,]+)/);\n  if (totalIncomeMatch) {\n    let value = totalIncomeMatch[1].trim().replace(/,/g, '');\n    if (result.formNumber === 'ITR-4') {\n      result.totalIncome = parseFloat(value) || 0;\n    } else {\n      result.totalIncome = parseFloat(value.substring(1)) || 0;\n    }\n  }\n\n  const businessLossMatch = text.match(\n    /Current Year business loss, if any\\s*([\\d,]+)/\n  );\n  if (businessLossMatch) {\n    let value = businessLossMatch[1].trim().replace(/,/g, '');\n    result.businessLoss = parseFloat(value.substring(1)) || 0; // Remove leftmost number\n  }\n\n  const totalTaxInterestFeePayableMatch = text.match(\n    /Total tax, interest and Fee payable\\s*([\\d,]+)/\n  );\n  if (totalTaxInterestFeePayableMatch) {\n    let value = totalTaxInterestFeePayableMatch[1].trim().replace(/,/g, '');\n    result.totalTaxInterestFeePayable = parseFloat(value.substring(1)) || 0; // Remove leftmost number\n  }\n\n  const taxesPaidMatch = text.match(/Taxes Paid\\s*([\\d,]+)/);\n  if (taxesPaidMatch) {\n    let value = taxesPaidMatch[1].trim().replace(/,/g, '');\n    result.taxesPaid = parseFloat(value.substring(1)) || 0; // Remove leftmost number\n  }\n\n  const accretedIncomeMatch = text.match(\n    /Accreted Income as per section 115TD\\s*([\\d,]+)/\n  );\n  if (accretedIncomeMatch) {\n    let value = accretedIncomeMatch[1].trim().replace(/,/g, '');\n    result.accretedIncome = parseFloat(value.substring(2)) || 0; // Remove first two digits\n  }\n\n  const additionalTaxInterestPayableMatch = text.match(\n    /Additional Tax and interest payable\\s*([\\d,]+)/\n  );\n  if (additionalTaxInterestPayableMatch) {\n    let value = additionalTaxInterestPayableMatch[1].trim().replace(/,/g, '');\n    result.additionalTaxInterestPayable = parseFloat(value.substring(2)) || 0; // Remove first two digits\n  }\n\n  const taxInterestPaidMatch = text.match(/Tax and interest paid\\s*([\\d,]+)/);\n  if (taxInterestPaidMatch) {\n    let value = taxInterestPaidMatch[1].trim().replace(/,/g, '');\n    result.taxInterestPaid = parseFloat(value.substring(2)) || 0; // Remove first two digits\n  }\n  output.name = result.name;\n  output.formNumber = result.formNumber;\n  output.loss = result.businessLoss;\n  output.income = result.totalIncome + result.accretedIncome;\n  output.taxPaid = result.taxesPaid + result.taxInterestPaid;\n  output.taxPayable =\n    result.totalTaxInterestFeePayable + result.additionalTaxInterestPayable;\n  const validForms = ['ITR-3', 'ITR-4', 'ITR-5', 'ITR-7'];\n  if (!validForms.includes(output.formNumber)) {\n    return { message: 'document is not valid' };\n  }\n  return output;\n}\n", "import { prisma } from \"../helpers\";\nimport {Request,Response,NextResponse} from 'express'\nexport const Search =async (req: Request, res: Response, next:NextResponse) => {\n  try {\n    const { query } = req.query;\n\n    if (typeof query !== 'string') {\n      return res.status(400).json({ error: 'Invalid search query' });\n    }\n\n    const users = await prisma.user.findMany({\n      where: {\n        OR: [\n          { business_name: { contains: query, mode: 'insensitive' } },\n          { promoter_name: { contains: query, mode: 'insensitive' } },\n        ],\n      },\n      select: {\n        id: true,\n        business_name: true,\n        promoter_name: true,\n        sumAssured: true,\n        safetyRating: true,\n  \n      },\n      take: 10,\n    });\n\n    res.status(200).json(users);\n  } catch (error) {\n    res.status(500).json({ error: 'Error searching users' });\n  }\n}", "import express from 'express';\n\nimport { isLoggedIn } from '../middleware';\nimport { getBuyerTransaction, initiateTransaction ,getSellerTransaction, Search, getPendingTransactionsn, approvePendingTransactions} from '../controllers';\n\nexport const transRouter = express.Router();\ntransRouter.post('/new', isLoggedIn, initiateTransaction).get('/buyer', isLoggedIn, getBuyerTransaction).get('/seller', isLoggedIn, getSellerTransaction).post('/search', Search).get('/pending', isLoggedIn, getPendingTransactionsn).post(\"/approve\",approvePendingTransactions)\n", "import { NextFunction, Request, Response } from 'express';\nimport 'dotenv/config';\nimport jwt from 'jsonwebtoken';\nimport { config } from './config/config';\nexport interface UserPayload {\n  email: string;\n}\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Express {\n    interface Request {\n      user?: UserPayload;\n    }\n  }\n}\n\nasync function isLoggedIn(req: Request, res: Response, next: NextFunction) {\n  // fetching cookie\n  const decoded = req.headers['authorization'];\n\n  if (!decoded) {\n    return res.status(403).json({\n      success: false,\n      data: 'Not Authorised',\n    });\n  }\n  try {\n    const limbo = decoded.split(' ');\n    const token = limbo[1];\n    const payload = jwt.verify(token, config.JWT_SECRET) as UserPayload;\n    //fetch user\n\n    const user = payload;\n    req.user = user;\n  } catch (err) {\n    if (err instanceof Error) {\n      return res.status(400).json({\n        success: false,\n        data: err.message,\n      });\n    }\n\n    return res.status(400).json({\n      success: false,\n      data: 'Something went wrong',\n    });\n  }\n  next();\n}\n\nexport { isLoggedIn };\n", "import express from 'express';\nimport { isLoggedIn } from '../middleware';\nimport { AddFunds } from '../controllers';\nexport const fundsRouter = express.Router();\nfundsRouter.post('/add',isLoggedIn,AddFunds)", "import { config } from './config/config';\nimport { app } from './app';\nimport { prisma } from './helpers';\nconfig.verifyConfig()\n    app.listen(config.PORT, () => {\n      console.log(`Server running on port ${config.PORT}`);\n    });\n"],
  "mappings": "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",
  "names": ["import_config", "Config", "__publicField", "errors", "envVariable", "config", "import_express", "import_cors", "errorHandler", "err", "req", "res", "next", "status", "import_jsonwebtoken", "JWT", "__publicField", "email", "owner", "business", "jsonwebtoken", "config", "tokens", "import_bcryptjs", "Password", "__publicField", "password", "sa", "bcryptjs", "hashedpassword", "Pass", "import_client", "prisma", "config", "calculateBusinessMetrics", "user", "funds", "currentDate", "registrationDate", "businessAge", "sumAssured", "sum", "fund", "safetyPoints", "totalIncome", "totalLoss", "incomeToLossRatio", "totalTaxPaid", "totalTaxPayable", "taxComplianceRatio", "safetyRating", "import_express", "import_zod", "businessSignup", "z", "businessLogin", "import_zod", "newTransaction", "z", "registerBusiness", "req", "res", "next", "body", "parsedBody", "businessSignup", "prisma", "hashedPassword", "Pass", "token", "tokens", "error", "loginBusiness", "req", "res", "next", "body", "parsedBody", "businessLogin", "existingEmail", "prisma", "Pass", "token", "tokens", "error", "initiateTransaction", "req", "res", "next", "buyerEmail", "data", "parsed", "newTransaction", "buyerID", "prisma", "sellerID", "error", "getBuyerTransaction", "email", "entries", "sellerIds", "entry", "sellerMap", "acc", "seller", "updatedEntries", "sellerName", "monthYear", "getSellerTransaction", "buyerIds", "buyer", "buyerName", "getPendingTransactionsn", "buyerMap", "response", "date", "formattedDate", "approvePendingTransactions", "id", "type", "change", "import_axios", "import_pdf_parse", "AddFunds", "req", "res", "next", "userEmail", "url", "response", "axios", "text", "pdf", "extractedData", "extractInformation", "userId", "prisma", "dbEntry", "funds", "businessMetric", "calculateBusinessMetrics", "error", "result", "output", "nameMatch", "formNumberMatch", "totalIncomeMatch", "value", "businessLossMatch", "totalTaxInterestFeePayableMatch", "taxesPaidMatch", "accretedIncomeMatch", "additionalTaxInterestPayableMatch", "taxInterestPaidMatch", "Search", "req", "res", "next", "query", "users", "prisma", "authRouter", "express", "registerBusiness", "loginBusiness", "import_express", "import_config", "import_jsonwebtoken", "isLoggedIn", "req", "res", "next", "decoded", "token", "user", "jwt", "config", "err", "transRouter", "express", "isLoggedIn", "initiateTransaction", "getBuyerTransaction", "getSellerTransaction", "Search", "getPendingTransactionsn", "approvePendingTransactions", "import_express", "fundsRouter", "express", "isLoggedIn", "AddFunds", "app", "express", "cors", "req", "res", "authRouter", "transRouter", "fundsRouter", "errorHandler", "config", "app"]
}
